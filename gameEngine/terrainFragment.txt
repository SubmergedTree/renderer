#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 FragPos;  
in vec3 Normal;  

struct Material {
	sampler2D diffuseBackground;
    sampler2D specularbackground;

    sampler2D diffuseR;
    sampler2D specularR;

    sampler2D diffuseG;
    sampler2D specularG;

    sampler2D diffuseB;
    sampler2D specularB;

    float shininess;
}; 

uniform sampler2D blendMap;

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
	vec4 blendMapColor = texture(blendMap,TexCoord);
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = TexCoord * 40.0;

	vec4 diffuseBackgroundColor = texture(material.diffuseBackground,tiledCoords) * backTextureAmount;
	vec4 diffuseRColor = texture(material.diffuseR,tiledCoords) * blendMapColor.r;
	vec4 diffuseGColor = texture(material.diffuseG,tiledCoords) * blendMapColor.g;
	vec4 diffuseBColor = texture(material.diffuseB,tiledCoords) * blendMapColor.b;

	vec4 specularBackgroundColor = texture(material.specularbackground,tiledCoords) * backTextureAmount;
	vec4 specularRColor = texture(material.specularR,tiledCoords) * blendMapColor.r;
	vec4 specularGColor = texture(material.specularG,tiledCoords) * blendMapColor.g;
	vec4 specularBColor = texture(material.specularB,tiledCoords) * blendMapColor.b;

	vec4 finalDiffuseColor = diffuseBackgroundColor + diffuseRColor + diffuseGColor + diffuseBColor;
	vec4 finalSpecularColor = specularBackgroundColor + specularRColor + specularGColor + specularBColor;


	// ambient
    vec3 ambient = light.ambient * finalDiffuseColor.rgb;

     // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * finalDiffuseColor.rgb;
    

     // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * finalSpecularColor.rgb;  
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}